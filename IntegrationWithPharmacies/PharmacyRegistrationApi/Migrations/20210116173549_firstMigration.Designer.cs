// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PharmacyRegistrationApi.DbContextModel;

namespace PharmacyRegistrationApi.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20210116173549_firstMigration")]
    partial class firstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("PharmacyRegistrationApi.Model.PharmacyConnectionInfo", b =>
                {
                    b.Property<string>("ApiKey")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("RegistrationInPharmacyId")
                        .HasColumnType("int");

                    b.HasKey("ApiKey");

                    b.HasIndex("RegistrationInPharmacyId")
                        .IsUnique();

                    b.ToTable("RegistrationsInfo");

                    b.HasData(
                        new
                        {
                            ApiKey = "api1",
                            Email = "jankovic1@gmail.com",
                            RegistrationInPharmacyId = 1
                        });
                });

            modelBuilder.Entity("PharmacyRegistrationApi.Model.PharmacyNameInfo", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("RegistrationInPharmacyId")
                        .HasColumnType("int");

                    b.HasKey("Name");

                    b.HasIndex("RegistrationInPharmacyId")
                        .IsUnique();

                    b.ToTable("PharmacyNameInfos");

                    b.HasData(
                        new
                        {
                            Name = "Jankovic 1",
                            RegistrationInPharmacyId = 1
                        });
                });

            modelBuilder.Entity("PharmacyRegistrationApi.Model.RegistrationInPharmacy", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("PharmacyId")
                        .HasColumnType("int");

                    b.Property<string>("Town")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("Registrations");

                    b.HasData(
                        new
                        {
                            id = 1,
                            PharmacyId = 1,
                            Town = "Novi Sad"
                        });
                });

            modelBuilder.Entity("PharmacyRegistrationApi.Model.PharmacyConnectionInfo", b =>
                {
                    b.HasOne("PharmacyRegistrationApi.Model.RegistrationInPharmacy", null)
                        .WithOne("PharmacyConnectionInfo")
                        .HasForeignKey("PharmacyRegistrationApi.Model.PharmacyConnectionInfo", "RegistrationInPharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PharmacyRegistrationApi.Model.PharmacyNameInfo", b =>
                {
                    b.HasOne("PharmacyRegistrationApi.Model.RegistrationInPharmacy", null)
                        .WithOne("PharmacyNameInfo")
                        .HasForeignKey("PharmacyRegistrationApi.Model.PharmacyNameInfo", "RegistrationInPharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
