// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SearchMicroserviceApi.DbContextModel;

namespace SearchMicroserviceApi.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20210103221225_FirstMigration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("SearchMicroserviceApi.Model.Equipment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("Equipment");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Equipment");

                    b.HasData(
                        new
                        {
                            id = 1,
                            name = "Equipment name",
                            quantity = 1
                        });
                });

            modelBuilder.Entity("SearchMicroserviceApi.Model.ModelEquipment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Data")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("RoomId");

                    b.ToTable("ModelEquipment");
                });

            modelBuilder.Entity("SearchMicroserviceApi.Model.ModelMedicine", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Data")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("RoomId");

                    b.ToTable("ModelMedicine");
                });

            modelBuilder.Entity("SearchMicroserviceApi.Model.ModelRoom", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Data")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("EquipmentId");

                    b.ToTable("modelRooms");

                    b.HasData(
                        new
                        {
                            id = 1,
                            Data = "data",
                            EquipmentId = 1
                        });
                });

            modelBuilder.Entity("SearchMicroserviceApi.Model.Prescription", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("comment")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("isUsed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("patientsid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("Prescriptions");

                    b.HasData(
                        new
                        {
                            id = 5,
                            DoctorId = 1,
                            comment = "Use every day",
                            isUsed = false,
                            patientsid = 1
                        },
                        new
                        {
                            id = 6,
                            DoctorId = 1,
                            comment = "When needed",
                            isUsed = true,
                            patientsid = 2
                        },
                        new
                        {
                            id = 7,
                            DoctorId = 2,
                            comment = "On every 12 hours",
                            isUsed = true,
                            patientsid = 1
                        },
                        new
                        {
                            id = 8,
                            DoctorId = 1,
                            comment = "After lunch",
                            isUsed = true,
                            patientsid = 1
                        });
                });

            modelBuilder.Entity("SearchMicroserviceApi.Model.Room", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("forUse")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("typeOfRoom")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            id = 1,
                            forUse = true,
                            typeOfRoom = "typeOfRoom"
                        });
                });

            modelBuilder.Entity("SearchMicroserviceApi.Model.Medicine", b =>
                {
                    b.HasBaseType("SearchMicroserviceApi.Model.Equipment");

                    b.Property<int>("PrescriptionId")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("doctorId")
                        .HasColumnType("int");

                    b.Property<bool>("isConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.HasIndex("PrescriptionId");

                    b.HasDiscriminator().HasValue("Medicine");

                    b.HasData(
                        new
                        {
                            id = 51,
                            name = "Pancef",
                            quantity = 44,
                            PrescriptionId = 5,
                            description = "For temperature",
                            doctorId = 1,
                            isConfirmed = false
                        },
                        new
                        {
                            id = 52,
                            name = "Defrinol",
                            quantity = 2,
                            PrescriptionId = 7,
                            description = "For headache",
                            doctorId = 1,
                            isConfirmed = false
                        },
                        new
                        {
                            id = 53,
                            name = "Brufen",
                            quantity = 2,
                            PrescriptionId = 8,
                            description = "For illness",
                            doctorId = 1,
                            isConfirmed = false
                        },
                        new
                        {
                            id = 54,
                            name = "Paracetamol",
                            quantity = 4,
                            PrescriptionId = 6,
                            description = "For illness",
                            doctorId = 1,
                            isConfirmed = false
                        });
                });

            modelBuilder.Entity("SearchMicroserviceApi.Model.OfferedMedicines", b =>
                {
                    b.HasBaseType("SearchMicroserviceApi.Model.Medicine");

                    b.Property<double>("price")
                        .HasColumnType("double");

                    b.HasDiscriminator().HasValue("OfferedMedicines");
                });

            modelBuilder.Entity("SearchMicroserviceApi.Model.ModelEquipment", b =>
                {
                    b.HasOne("SearchMicroserviceApi.Model.Room", "Room")
                        .WithMany("equipment")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SearchMicroserviceApi.Model.ModelMedicine", b =>
                {
                    b.HasOne("SearchMicroserviceApi.Model.Room", "Room")
                        .WithMany("medicine")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SearchMicroserviceApi.Model.ModelRoom", b =>
                {
                    b.HasOne("SearchMicroserviceApi.Model.Equipment", "Equipment")
                        .WithMany("room")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SearchMicroserviceApi.Model.Medicine", b =>
                {
                    b.HasOne("SearchMicroserviceApi.Model.Prescription", "Prescription")
                        .WithMany("Medicines")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
