// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PatientWebApplication.Models;

namespace PatientWebApplication.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20201105220220_SecondMigration")]
    partial class SecondMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Class_diagram.Model.Doctor.Operation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DoctorUserId")
                        .HasColumnType("int");

                    b.Property<int>("OperationReferralId")
                        .HasColumnType("int");

                    b.Property<int>("PatientUserId")
                        .HasColumnType("int");

                    b.Property<string>("date")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<TimeSpan>("end")
                        .HasColumnType("time(6)");

                    b.Property<string>("idRoom")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<TimeSpan>("start")
                        .HasColumnType("time(6)");

                    b.HasKey("id");

                    b.HasIndex("DoctorUserId");

                    b.HasIndex("OperationReferralId");

                    b.HasIndex("PatientUserId");

                    b.ToTable("Operations");

                    b.HasData(
                        new
                        {
                            id = 1,
                            DoctorUserId = 1,
                            OperationReferralId = 1,
                            PatientUserId = 1,
                            date = "2/2/2020",
                            end = new TimeSpan(0, 0, 0, 0, 0),
                            idRoom = "room1",
                            start = new TimeSpan(0, 0, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("Class_diagram.Model.Doctor.Referral", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("classify")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("comment")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("medicine")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("quantityPerDay")
                        .HasColumnType("int");

                    b.Property<string>("takeMedicineUntil")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("Referral");

                    b.HasData(
                        new
                        {
                            id = 1,
                            classify = "classify",
                            comment = "comment",
                            medicine = "Medicine",
                            quantityPerDay = 3,
                            takeMedicineUntil = "Take medicine until"
                        });
                });

            modelBuilder.Entity("Class_diagram.Model.Employee.Schedule", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("date")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("employeeFirst")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("employeeLast")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("employeeid")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("isOnDuty")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("room")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("shiftId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("shiftId");

                    b.ToTable("Schedule");

                    b.HasData(
                        new
                        {
                            id = 1,
                            date = "2/2/2020",
                            employeeFirst = "EmployeeName",
                            employeeLast = "EmployeeSurname",
                            employeeid = "1",
                            isOnDuty = false,
                            room = "1",
                            shiftId = 1
                        });
                });

            modelBuilder.Entity("Class_diagram.Model.Employee.Shift", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("endTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("startTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("Shift");

                    b.HasData(
                        new
                        {
                            id = 1,
                            endTime = "End time",
                            startTime = "Start time"
                        });
                });

            modelBuilder.Entity("Class_diagram.Model.Hospital.Equipment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("Equipment");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Equipment");

                    b.HasData(
                        new
                        {
                            id = 1,
                            name = "Equipment name",
                            quantity = 1
                        });
                });

            modelBuilder.Entity("Class_diagram.Model.Hospital.Renovation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("endDate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("room")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("startDate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("Renovation");

                    b.HasData(
                        new
                        {
                            id = 1,
                            endDate = "End Date",
                            room = "1",
                            startDate = "Start date"
                        });
                });

            modelBuilder.Entity("Class_diagram.Model.Patient.Feedback", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Message")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("PatientId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new
                        {
                            id = 1,
                            IsAnonymous = true,
                            IsPublic = true,
                            IsPublished = false,
                            Message = "First message",
                            PatientId = 1
                        },
                        new
                        {
                            id = 2,
                            IsAnonymous = false,
                            IsPublic = false,
                            IsPublished = false,
                            Message = "Second message",
                            PatientId = 1
                        },
                        new
                        {
                            id = 3,
                            IsAnonymous = false,
                            IsPublic = true,
                            IsPublished = false,
                            Message = "Third message",
                            PatientId = 1
                        },
                        new
                        {
                            id = 4,
                            IsAnonymous = false,
                            IsPublic = true,
                            IsPublished = false,
                            Message = "Fourth message",
                            PatientId = 1
                        });
                });

            modelBuilder.Entity("Class_diagram.Model.Patient.PatientUser", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("allergie")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("city")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("dateOfBirth")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("firstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("guest")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("isRegisteredBySecretary")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("medicalIdNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("phoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("secondName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("uniqueCitizensidentityNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            id = 1,
                            allergie = "Alergija",
                            city = "Grad",
                            dateOfBirth = "2/2/2020",
                            email = "email",
                            firstName = "Pera",
                            guest = false,
                            isRegisteredBySecretary = false,
                            medicalIdNumber = "1234",
                            password = "pass",
                            phoneNumber = "123",
                            secondName = "Peric",
                            uniqueCitizensidentityNumber = "1234"
                        });
                });

            modelBuilder.Entity("HCI_wireframe.Model.Doctor.DoctorNotification", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Data")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DoctorUserId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("DoctorUserId");

                    b.ToTable("DoctorNotifications");

                    b.HasData(
                        new
                        {
                            id = 3,
                            Data = "3. string",
                            DoctorUserId = 1
                        });
                });

            modelBuilder.Entity("HCI_wireframe.Model.Doctor.DoctorUser", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("city")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("dateOfBirth")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("firstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("isSpecialist")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ordination")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("phoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("salary")
                        .HasColumnType("double");

                    b.Property<string>("secondName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("speciality")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("uniqueCitizensidentityNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            id = 1,
                            city = "Grad",
                            dateOfBirth = "2/2/2020",
                            email = "email",
                            firstName = "DoctorName",
                            isSpecialist = false,
                            ordination = "Ordination 1",
                            password = "pass",
                            phoneNumber = "123",
                            salary = 200.0,
                            secondName = "DoctorSurname",
                            speciality = "Specialty",
                            uniqueCitizensidentityNumber = "1234"
                        });
                });

            modelBuilder.Entity("HCI_wireframe.Model.Hospital.ModelRoom", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Data")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("EquipmentId");

                    b.ToTable("modelRooms");

                    b.HasData(
                        new
                        {
                            id = 1,
                            Data = "data",
                            EquipmentId = 1
                        });
                });

            modelBuilder.Entity("HCI_wireframe.Model.Patient.ModelNotification", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Data")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PatientUserId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("PatientUserId");

                    b.ToTable("PatientNotifications");

                    b.HasData(
                        new
                        {
                            id = 3,
                            Data = "3. string",
                            PatientUserId = 1
                        });
                });

            modelBuilder.Entity("HCI_wireframe.Model.Hospital.OfferedMedicines", b =>
                {
                    b.HasBaseType("Class_diagram.Model.Hospital.Equipment");

                    b.Property<string>("description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("doctorId")
                        .HasColumnType("int");

                    b.Property<bool>("isConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("price")
                        .HasColumnType("double");

                    b.HasIndex("doctorId");

                    b.HasDiscriminator().HasValue("OfferedMedicines");

                    b.HasData(
                        new
                        {
                            id = 13,
                            name = "OfferedMedicine",
                            quantity = 2,
                            description = "description",
                            doctorId = 1,
                            isConfirmed = false,
                            price = 10.0
                        });
                });

            modelBuilder.Entity("Class_diagram.Model.Doctor.Operation", b =>
                {
                    b.HasOne("HCI_wireframe.Model.Doctor.DoctorUser", "isResponiable")
                        .WithMany()
                        .HasForeignKey("DoctorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Class_diagram.Model.Doctor.Referral", "operationReferral")
                        .WithMany()
                        .HasForeignKey("OperationReferralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Class_diagram.Model.Patient.PatientUser", "patient")
                        .WithMany()
                        .HasForeignKey("PatientUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Class_diagram.Model.Employee.Schedule", b =>
                {
                    b.HasOne("Class_diagram.Model.Employee.Shift", "shift")
                        .WithMany()
                        .HasForeignKey("shiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Class_diagram.Model.Patient.Feedback", b =>
                {
                    b.HasOne("Class_diagram.Model.Patient.PatientUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HCI_wireframe.Model.Doctor.DoctorNotification", b =>
                {
                    b.HasOne("HCI_wireframe.Model.Doctor.DoctorUser", "DoctorUser")
                        .WithMany("specialNotifications")
                        .HasForeignKey("DoctorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HCI_wireframe.Model.Hospital.ModelRoom", b =>
                {
                    b.HasOne("Class_diagram.Model.Hospital.Equipment", "Equipment")
                        .WithMany("room")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HCI_wireframe.Model.Patient.ModelNotification", b =>
                {
                    b.HasOne("Class_diagram.Model.Patient.PatientUser", "PatientUser")
                        .WithMany("notifications")
                        .HasForeignKey("PatientUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HCI_wireframe.Model.Hospital.OfferedMedicines", b =>
                {
                    b.HasOne("HCI_wireframe.Model.Doctor.DoctorUser", "doctor")
                        .WithMany()
                        .HasForeignKey("doctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
