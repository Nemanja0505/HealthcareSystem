// <auto-generated />
using System;
using AppointmentMicroserviceApi.DbContextModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AppointmentMicroserviceApi.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20210109195426_SeventhMigration")]
    partial class SeventhMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AppointmentMicroserviceApi.Doctor.Operation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Date")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DoctorUserId")
                        .HasColumnType("int");

                    b.Property<int>("PatientUserId")
                        .HasColumnType("int");

                    b.Property<string>("RoomId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<TimeSpan>("Start")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan>("end")
                        .HasColumnType("time(6)");

                    b.HasKey("id");

                    b.ToTable("Operations");

                    b.HasData(
                        new
                        {
                            id = 1,
                            Date = "23/12/2020",
                            DoctorUserId = 1,
                            PatientUserId = 2,
                            RoomId = "room1",
                            Start = new TimeSpan(0, 14, 0, 0, 0),
                            end = new TimeSpan(0, 15, 0, 0, 0)
                        },
                        new
                        {
                            id = 2,
                            Date = "03/10/2020",
                            DoctorUserId = 2,
                            PatientUserId = 1,
                            RoomId = "room1",
                            Start = new TimeSpan(0, 15, 0, 0, 0),
                            end = new TimeSpan(0, 15, 15, 0, 0)
                        });
                });

            modelBuilder.Entity("AppointmentMicroserviceApi.Doctor.OperationReferral", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("OperationId")
                        .HasColumnType("int");

                    b.Property<string>("classify")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("comment")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("medicine")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("quantityPerDay")
                        .HasColumnType("int");

                    b.Property<string>("takeMedicineUntil")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.HasIndex("OperationId")
                        .IsUnique();

                    b.ToTable("OperationReferrals");

                    b.HasData(
                        new
                        {
                            id = 1,
                            OperationId = 1,
                            classify = "Operation",
                            comment = "Operation was successfull.",
                            medicine = "Hemomycin",
                            quantityPerDay = 1,
                            takeMedicineUntil = "15/09/2020"
                        },
                        new
                        {
                            id = 2,
                            OperationId = 2,
                            classify = "Operation",
                            comment = "Patient lost a lot of blood.",
                            medicine = "Amoxicillin",
                            quantityPerDay = 3,
                            takeMedicineUntil = "18/10/2020"
                        });
                });

            modelBuilder.Entity("AppointmentMicroserviceApi.Doctor.Referral", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("classify")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("comment")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("medicine")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("quantityPerDay")
                        .HasColumnType("int");

                    b.Property<string>("takeMedicineUntil")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Referrals");

                    b.HasData(
                        new
                        {
                            id = 1,
                            AppointmentId = 1,
                            classify = "classify",
                            comment = "Patient had slight heart arrhythmia.",
                            medicine = "Aspirin",
                            quantityPerDay = 3,
                            takeMedicineUntil = "25/02/2020"
                        },
                        new
                        {
                            id = 2,
                            AppointmentId = 2,
                            classify = "Appointment",
                            comment = "Patient had cold.",
                            medicine = "Brufen",
                            quantityPerDay = 1,
                            takeMedicineUntil = "11/05/2020"
                        },
                        new
                        {
                            id = 3,
                            AppointmentId = 3,
                            classify = "classify",
                            comment = "Patient had slight heart arrhythmia.",
                            medicine = "Aspirin",
                            quantityPerDay = 3,
                            takeMedicineUntil = "25/02/2020"
                        },
                        new
                        {
                            id = 4,
                            AppointmentId = 4,
                            classify = "Appointment",
                            comment = "Patient had cold.",
                            medicine = "Brufen",
                            quantityPerDay = 1,
                            takeMedicineUntil = "11/05/2020"
                        },
                        new
                        {
                            id = 5,
                            AppointmentId = 5,
                            classify = "classify",
                            comment = "Patient had slight heart arrhythmia.",
                            medicine = "Aspirin",
                            quantityPerDay = 3,
                            takeMedicineUntil = "25/02/2020"
                        },
                        new
                        {
                            id = 6,
                            AppointmentId = 6,
                            classify = "Appointment",
                            comment = "Patient had cold.",
                            medicine = "Brufen",
                            quantityPerDay = 1,
                            takeMedicineUntil = "11/05/2020"
                        },
                        new
                        {
                            id = 7,
                            AppointmentId = 7,
                            classify = "classify",
                            comment = "Patient had slight heart arrhythmia.",
                            medicine = "Aspirin",
                            quantityPerDay = 3,
                            takeMedicineUntil = "25/02/2020"
                        },
                        new
                        {
                            id = 8,
                            AppointmentId = 8,
                            classify = "Appointment",
                            comment = "Patient had cold.",
                            medicine = "Brufen",
                            quantityPerDay = 1,
                            takeMedicineUntil = "11/05/2020"
                        },
                        new
                        {
                            id = 9,
                            AppointmentId = 9,
                            classify = "classify",
                            comment = "Patient had slight heart arrhythmia.",
                            medicine = "Aspirin",
                            quantityPerDay = 3,
                            takeMedicineUntil = "25/02/2020"
                        },
                        new
                        {
                            id = 10,
                            AppointmentId = 10,
                            classify = "Appointment",
                            comment = "Patient had cold.",
                            medicine = "Brufen",
                            quantityPerDay = 1,
                            takeMedicineUntil = "11/05/2020"
                        },
                        new
                        {
                            id = 11,
                            AppointmentId = 11,
                            classify = "classify",
                            comment = "Patient had slight heart arrhythmia.",
                            medicine = "Aspirin",
                            quantityPerDay = 3,
                            takeMedicineUntil = "25/02/2020"
                        },
                        new
                        {
                            id = 12,
                            AppointmentId = 12,
                            classify = "Appointment",
                            comment = "Patient had cold.",
                            medicine = "Brufen",
                            quantityPerDay = 1,
                            takeMedicineUntil = "11/05/2020"
                        });
                });

            modelBuilder.Entity("AppointmentMicroserviceApi.Patient.DoctorAppointment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CancelDateString")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Date")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DoctorUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PatientUserId")
                        .HasColumnType("int");

                    b.Property<string>("RoomId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<TimeSpan>("Start")
                        .HasColumnType("time(6)");

                    b.HasKey("id");

                    b.ToTable("DoctorAppointments");

                    b.HasData(
                        new
                        {
                            id = 1,
                            Date = "23/12/2020",
                            DoctorUserId = 1,
                            IsCanceled = false,
                            PatientUserId = 2,
                            RoomId = "1",
                            Start = new TimeSpan(0, 14, 15, 0, 0)
                        },
                        new
                        {
                            id = 2,
                            Date = "23/12/2020",
                            DoctorUserId = 2,
                            IsCanceled = false,
                            PatientUserId = 2,
                            RoomId = "1",
                            Start = new TimeSpan(0, 14, 30, 0, 0)
                        },
                        new
                        {
                            id = 3,
                            Date = "23/12/2020",
                            DoctorUserId = 2,
                            IsCanceled = false,
                            PatientUserId = 1,
                            RoomId = "1",
                            Start = new TimeSpan(0, 15, 0, 0, 0)
                        },
                        new
                        {
                            id = 4,
                            Date = "23/12/2020",
                            DoctorUserId = 2,
                            IsCanceled = false,
                            PatientUserId = 1,
                            RoomId = "1",
                            Start = new TimeSpan(0, 15, 45, 0, 0)
                        },
                        new
                        {
                            id = 5,
                            Date = "22/12/2020",
                            DoctorUserId = 1,
                            IsCanceled = false,
                            PatientUserId = 1,
                            RoomId = "1",
                            Start = new TimeSpan(0, 12, 0, 0, 0)
                        },
                        new
                        {
                            id = 6,
                            Date = "22/12/2020",
                            DoctorUserId = 3,
                            IsCanceled = false,
                            PatientUserId = 2,
                            RoomId = "1",
                            Start = new TimeSpan(0, 12, 15, 0, 0)
                        },
                        new
                        {
                            id = 7,
                            Date = "07/02/2031",
                            DoctorUserId = 3,
                            IsCanceled = false,
                            PatientUserId = 1,
                            RoomId = "1",
                            Start = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            id = 8,
                            Date = "07/12/2020",
                            DoctorUserId = 2,
                            IsCanceled = false,
                            PatientUserId = 1,
                            RoomId = "1",
                            Start = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            id = 9,
                            Date = "05/12/2030",
                            DoctorUserId = 1,
                            IsCanceled = false,
                            PatientUserId = 1,
                            RoomId = "1",
                            Start = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            id = 10,
                            Date = "11/11/2030",
                            DoctorUserId = 2,
                            IsCanceled = false,
                            PatientUserId = 1,
                            RoomId = "1",
                            Start = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            id = 11,
                            Date = "14/03/2016",
                            DoctorUserId = 1,
                            IsCanceled = false,
                            PatientUserId = 2,
                            RoomId = "A2",
                            Start = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            id = 12,
                            Date = "11/11/2010",
                            DoctorUserId = 2,
                            IsCanceled = false,
                            PatientUserId = 2,
                            RoomId = "B3",
                            Start = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            id = 13,
                            CancelDateString = "09/01/2021",
                            Date = "23/12/2020",
                            DoctorUserId = 2,
                            IsCanceled = true,
                            PatientUserId = 3,
                            RoomId = "1",
                            Start = new TimeSpan(0, 15, 0, 0, 0)
                        },
                        new
                        {
                            id = 14,
                            CancelDateString = "09/01/2021",
                            Date = "23/12/2020",
                            DoctorUserId = 2,
                            IsCanceled = true,
                            PatientUserId = 3,
                            RoomId = "1",
                            Start = new TimeSpan(0, 15, 45, 0, 0)
                        },
                        new
                        {
                            id = 15,
                            CancelDateString = "09/01/2021",
                            Date = "22/12/2020",
                            DoctorUserId = 1,
                            IsCanceled = true,
                            PatientUserId = 3,
                            RoomId = "1",
                            Start = new TimeSpan(0, 12, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("AppointmentMicroserviceApi.Patient.Question", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("answer")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            id = 1,
                            answer = "Answer",
                            name = "Name"
                        });
                });

            modelBuilder.Entity("AppointmentMicroserviceApi.Patient.Survey", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("appointmentId")
                        .HasColumnType("int");

                    b.Property<int>("doctorsKnowledge")
                        .HasColumnType("int");

                    b.Property<int>("doctorsPoliteness")
                        .HasColumnType("int");

                    b.Property<int>("doctorsProfessionalism")
                        .HasColumnType("int");

                    b.Property<int>("doctorsSkill")
                        .HasColumnType("int");

                    b.Property<int>("doctorsTechnicality")
                        .HasColumnType("int");

                    b.Property<int>("doctorsWorkingPace")
                        .HasColumnType("int");

                    b.Property<int>("hospitalEnvironment")
                        .HasColumnType("int");

                    b.Property<int>("hospitalEquipment")
                        .HasColumnType("int");

                    b.Property<int>("hospitalHygiene")
                        .HasColumnType("int");

                    b.Property<int>("hospitalPrices")
                        .HasColumnType("int");

                    b.Property<int>("hospitalWaitingTime")
                        .HasColumnType("int");

                    b.Property<int>("medicalStaffsKnowledge")
                        .HasColumnType("int");

                    b.Property<int>("medicalStaffsPoliteness")
                        .HasColumnType("int");

                    b.Property<int>("medicalStaffsProfessionalism")
                        .HasColumnType("int");

                    b.Property<int>("medicalStaffsSkill")
                        .HasColumnType("int");

                    b.Property<int>("medicalStaffsTechnicality")
                        .HasColumnType("int");

                    b.Property<int>("medicalStaffsWorkingPace")
                        .HasColumnType("int");

                    b.Property<int>("patientId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("appointmentId");

                    b.ToTable("Surveys");

                    b.HasData(
                        new
                        {
                            id = 1,
                            appointmentId = 3,
                            doctorsKnowledge = 4,
                            doctorsPoliteness = 5,
                            doctorsProfessionalism = 4,
                            doctorsSkill = 5,
                            doctorsTechnicality = 4,
                            doctorsWorkingPace = 5,
                            hospitalEnvironment = 3,
                            hospitalEquipment = 3,
                            hospitalHygiene = 2,
                            hospitalPrices = 2,
                            hospitalWaitingTime = 5,
                            medicalStaffsKnowledge = 5,
                            medicalStaffsPoliteness = 5,
                            medicalStaffsProfessionalism = 4,
                            medicalStaffsSkill = 5,
                            medicalStaffsTechnicality = 5,
                            medicalStaffsWorkingPace = 4,
                            patientId = 1
                        },
                        new
                        {
                            id = 2,
                            appointmentId = 4,
                            doctorsKnowledge = 5,
                            doctorsPoliteness = 5,
                            doctorsProfessionalism = 4,
                            doctorsSkill = 1,
                            doctorsTechnicality = 3,
                            doctorsWorkingPace = 5,
                            hospitalEnvironment = 1,
                            hospitalEquipment = 3,
                            hospitalHygiene = 3,
                            hospitalPrices = 3,
                            hospitalWaitingTime = 5,
                            medicalStaffsKnowledge = 5,
                            medicalStaffsPoliteness = 2,
                            medicalStaffsProfessionalism = 2,
                            medicalStaffsSkill = 2,
                            medicalStaffsTechnicality = 4,
                            medicalStaffsWorkingPace = 3,
                            patientId = 1
                        });
                });

            modelBuilder.Entity("AppointmentMicroserviceApi.Doctor.OperationReferral", b =>
                {
                    b.HasOne("AppointmentMicroserviceApi.Doctor.Operation", null)
                        .WithOne("operationReferral")
                        .HasForeignKey("AppointmentMicroserviceApi.Doctor.OperationReferral", "OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppointmentMicroserviceApi.Doctor.Referral", b =>
                {
                    b.HasOne("AppointmentMicroserviceApi.Patient.DoctorAppointment", null)
                        .WithMany("referral")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppointmentMicroserviceApi.Patient.Survey", b =>
                {
                    b.HasOne("AppointmentMicroserviceApi.Patient.DoctorAppointment", "appointment")
                        .WithMany()
                        .HasForeignKey("appointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
